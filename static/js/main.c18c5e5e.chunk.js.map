{"version":3,"sources":["components/header.js","components/Inicio.js","components/Nosotros.js","components/Proyectos.js","components/Integrantes.js","components/Contacto.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","react_router_dom","to","Inicio","Nosotros","Proyectos","Integrantes","Contacto","App","header","react_router","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uLAmCeA,EAhCA,kBACXC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,+CACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,IAAIF,UAAU,gBAAvB,0BAGAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,sBACVH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YACVH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,YAAYF,UAAU,YAA/B,aAIJH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YACVH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,aAAaF,UAAU,YAAhC,cAIJH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YACVH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,eAAeF,UAAU,YAAlC,gBAIJH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YACVH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,YAAYF,UAAU,YAA/B,iBClBLG,MANf,WACI,OACIN,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAd,WCGOI,MALf,WACI,OACIP,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAd,aCGOK,MALf,WACI,OACIR,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAd,cCGOM,MALf,WACI,OACIT,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAd,gBCGOO,MALf,WACI,OACIV,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAd,aCwBOQ,MAlBf,WACE,OAEEX,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAACU,EAAD,MACAZ,EAAAC,EAAAC,cAAA,QAAMC,UAAU,uBACdH,EAAAC,EAAAC,cAACW,EAAA,EAAD,KACEb,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWV,IACjCN,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,YAAYC,UAAWT,IACzCP,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,aAAaC,UAAWR,IAC1CR,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,eAAeC,UAAWP,IAC5CT,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,YAAYC,UAAWN,QCT/BO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOvB,EAAAC,EAAAC,cAACsB,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c18c5e5e.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nconst Header = () => (\r\n    <div className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n        <div className=\"container\">\r\n            <Link to=\"/\" className=\"navbar-brand\">\r\n                Aumentando capacidades\r\n            </Link>\r\n            <ul className=\"navbar-nav mr-auto\">\r\n                <li className=\"nav-item\">\r\n                    <Link to='/nosotros' className=\"nav-link\">\r\n                        Nosotros\r\n                    </Link>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                    <Link to='/proyectos' className=\"nav-link\">\r\n                    Proyectos\r\n                    </Link>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                    <Link to='/integrantes' className=\"nav-link\">\r\n                        Integrantes\r\n                    </Link>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                    <Link to='/contacto' className=\"nav-link\">\r\n                        Contacto\r\n                    </Link>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    </div>\r\n);\r\n \r\nexport default Header;","import React from 'react';\r\n\r\nfunction Inicio(){\r\n    return(\r\n        <h1 className=\"text-center\">Inicio</h1>\r\n    )\r\n}\r\n\r\nexport default Inicio;","import React from 'react';\r\n\r\nfunction Nosotros(){\r\n    return(\r\n        <h1 className=\"text-center\">Nosotros</h1>\r\n    )\r\n}\r\nexport default Nosotros;","import React from 'react';\r\n\r\nfunction Proyectos(){\r\n    return(\r\n        <h1 className=\"text-center\">Proyectos</h1>\r\n    )\r\n}\r\nexport default Proyectos;","import React from 'react';\r\n\r\nfunction Integrantes(){\r\n    return(\r\n        <h1 className=\"text-center\">Integrantes</h1>\r\n    )\r\n}\r\nexport default Integrantes;","import React from 'react';\r\n\r\nfunction Contacto(){\r\n    return(\r\n        <h1 className=\"text-center\">Contacto</h1>\r\n    )\r\n}\r\nexport default Contacto;","import React from 'react';\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\n\nimport Header from \"./components/header\";\nimport Inicio from \"./components/Inicio\";\nimport Nosotros from \"./components/Nosotros\";\nimport Proyectos from \"./components/Proyectos\";\nimport Integrantes from \"./components/Integrantes\";\nimport Contacto from \"./components/Contacto\";\n\nfunction App() {\n  return (\n\n    <Router>\n      <Header />\n      <main className=\"container mt-5 mb-5\">\n        <Switch>\n          <Route exact path=\"/\" component={Inicio} />\n          <Route exact path=\"/nosotros\" component={Nosotros} />\n          <Route exact path=\"/proyectos\" component={Proyectos} />\n          <Route exact path=\"/integrantes\" component={Integrantes} />\n          <Route exact path=\"/contacto\" component={Contacto} />\n        </Switch>\n      </main>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}